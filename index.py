import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import requests
import time
import os
import threading
from urllib.parse import quote
from datetime import datetime

class HotmailChecker:
    def __init__(self, root):
        self.root = root
        self.root.title("Hotmail Email Checker - Tool ki·ªÉm tra email")
        self.root.geometry("800x700")
        self.root.resizable(True, True)
        
        # Bi·∫øn ƒëi·ªÅu khi·ªÉn
        self.is_checking = False
        self.total_emails = 0
        self.current_index = 0
        self.existing_count = 0
        self.non_existing_count = 0
        self.unknown_count = 0
        
        # File handles ƒë·ªÉ ghi real-time
        self.existing_file = None
        self.non_existing_file = None
        self.unknown_file = None
        
        self.setup_ui()
        
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng"""
        # Style
        style = ttk.Style()
        style.theme_use('clam')
        
        # Main frame
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
        # Title
        title_label = ttk.Label(main_frame, text="üöÄ HOTMAIL EMAIL CHECKER", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # File selection frame
        file_frame = ttk.LabelFrame(main_frame, text="üìÅ Ch·ªçn file email", padding="10")
        file_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        file_frame.columnconfigure(1, weight=1)
        
        ttk.Label(file_frame, text="File email:").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.file_path_var = tk.StringVar(value="acc.txt")
        self.file_entry = ttk.Entry(file_frame, textvariable=self.file_path_var)
        self.file_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        ttk.Button(file_frame, text="Ch·ªçn file", command=self.select_file).grid(row=0, column=2)
        
        # Proxy frame
        proxy_frame = ttk.LabelFrame(main_frame, text="üåê Proxy Settings", padding="10")
        proxy_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        proxy_frame.columnconfigure(1, weight=1)
        
        self.use_proxy_var = tk.BooleanVar()
        ttk.Checkbutton(proxy_frame, text="S·ª≠ d·ª•ng proxy", 
                       variable=self.use_proxy_var, command=self.toggle_proxy).grid(row=0, column=0, sticky=tk.W)
        
        ttk.Label(proxy_frame, text="Proxy (ip:port):").grid(row=1, column=0, sticky=tk.W, padx=(0, 10))
        self.proxy_var = tk.StringVar()
        self.proxy_entry = ttk.Entry(proxy_frame, textvariable=self.proxy_var, state='disabled')
        self.proxy_entry.grid(row=1, column=1, sticky=(tk.W, tk.E), pady=(5, 0))
        
        # Settings frame
        settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è C√†i ƒë·∫∑t", padding="10")
        settings_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        ttk.Label(settings_frame, text="Delay (gi√¢y):").grid(row=0, column=0, sticky=tk.W, padx=(0, 10))
        self.delay_var = tk.StringVar(value="2")
        delay_spinbox = ttk.Spinbox(settings_frame, from_=1, to=10, width=10, textvariable=self.delay_var)
        delay_spinbox.grid(row=0, column=1, sticky=tk.W)
        
        ttk.Label(settings_frame, text="Timeout (gi√¢y):").grid(row=0, column=2, sticky=tk.W, padx=(20, 10))
        self.timeout_var = tk.StringVar(value="10")
        timeout_spinbox = ttk.Spinbox(settings_frame, from_=5, to=30, width=10, textvariable=self.timeout_var)
        timeout_spinbox.grid(row=0, column=3, sticky=tk.W)
        
        # Control buttons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=4, column=0, columnspan=3, pady=10)
        
        self.start_button = ttk.Button(button_frame, text="üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra", 
                                      command=self.start_checking, style='Accent.TButton')
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è D·ª´ng", 
                                     command=self.stop_checking, state='disabled')
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        ttk.Button(button_frame, text="üìÇ M·ªü th∆∞ m·ª•c", 
                  command=self.open_output_folder).pack(side=tk.LEFT, padx=5)
        
        # Progress frame
        progress_frame = ttk.LabelFrame(main_frame, text="üìä Ti·∫øn ƒë·ªô", padding="10")
        progress_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        progress_frame.columnconfigure(0, weight=1)
        
        self.progress_var = tk.StringVar(value="Ch∆∞a b·∫Øt ƒë·∫ßu")
        ttk.Label(progress_frame, textvariable=self.progress_var, font=('Arial', 10, 'bold')).grid(row=0, column=0)
        
        self.progress_bar = ttk.Progressbar(progress_frame, mode='determinate')
        self.progress_bar.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=5)
        
        # Stats frame
        stats_frame = ttk.Frame(progress_frame)
        stats_frame.grid(row=2, column=0, sticky=(tk.W, tk.E))
        stats_frame.columnconfigure((0, 1, 2), weight=1)
        
        self.existing_label = ttk.Label(stats_frame, text="‚úÖ ƒê√£ t·∫°o: 0", foreground='green')
        self.existing_label.grid(row=0, column=0)
        
        self.non_existing_label = ttk.Label(stats_frame, text="‚ùå Ch∆∞a t·∫°o: 0", foreground='red')
        self.non_existing_label.grid(row=0, column=1)
        
        self.unknown_label = ttk.Label(stats_frame, text="‚ö†Ô∏è Kh√¥ng r√µ: 0", foreground='orange')
        self.unknown_label.grid(row=0, column=2)
        
        # Log frame
        log_frame = ttk.LabelFrame(main_frame, text="üìù Log", padding="10")
        log_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        log_frame.columnconfigure(0, weight=1)
        log_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(6, weight=1)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
    def toggle_proxy(self):
        """B·∫≠t/t·∫Øt proxy entry"""
        if self.use_proxy_var.get():
            self.proxy_entry.config(state='normal')
        else:
            self.proxy_entry.config(state='disabled')
    
    def select_file(self):
        """Ch·ªçn file email"""
        filename = filedialog.askopenfilename(
            title="Ch·ªçn file email",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if filename:
            self.file_path_var.set(filename)
    
    def open_output_folder(self):
        """M·ªü th∆∞ m·ª•c ch·ª©a file k·∫øt qu·∫£"""
        output_dir = os.path.dirname(os.path.abspath(__file__))
        if os.name == 'nt':  # Windows
            os.startfile(output_dir)
        elif os.name == 'posix':  # macOS and Linux
            os.system(f'open "{output_dir}"')
    
    def log(self, message):
        """Ghi log v√†o text widget"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update_idletasks()
    
    def check_email_exists(self, email, proxy=None):
        """Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng - Logic ƒë∆°n gi·∫£n v√† ch√≠nh x√°c"""
        try:
            url = f"https://login.live.com/?username={quote(email)}"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                'Accept-Language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
                'Accept-Encoding': 'gzip, deflate, br',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
                'Cache-Control': 'no-cache'
            }
            
            proxies = None
            if proxy:
                proxies = {
                    'http': f'http://{proxy}',
                    'https': f'http://{proxy}'
                }
            
            timeout = int(self.timeout_var.get())
            
            response = requests.get(url, headers=headers, proxies=proxies, timeout=timeout, allow_redirects=True)
            
            if response.status_code == 200:
                content = response.text
                
                # DEBUG: Log m·ªôt ph·∫ßn content ƒë·ªÉ ki·ªÉm tra
                self.log(f"üîç Checking response for {email}...")
                
                # B∆Ø·ªöC 1: Ki·ªÉm tra EMAIL KH√îNG T·ªíN T·∫†I tr∆∞·ªõc ti√™n (∆ØU TI√äN CAO NH·∫§T)
                # Patterns t·ª´ screenshot c·ªßa b·∫°n
                error_patterns = [
                    "Ch√∫ng t√¥i kh√¥ng t√¨m th·∫•y t√†i kho·∫£n Microsoft",
                    "kh√¥ng t√¨m th·∫•y t√†i kho·∫£n Microsoft",  
                    "That Microsoft account doesn't exist",
                    "Microsoft account doesn't exist",
                    "account doesn't exist",
                    "H√£y th·ª≠ nh·∫≠p l·∫°i",
                    "t·∫°o t√†i kho·∫£n m·ªõi"
                ]
                
                # Ki·ªÉm tra t·ª´ng pattern "kh√¥ng t·ªìn t·∫°i"
                for pattern in error_patterns:
                    if pattern.lower() in content.lower():
                        self.log(f"‚ùå CH∆ØA T·ªíN T·∫†I - T√¨m th·∫•y: '{pattern}'")
                        return False
                
                # B∆Ø·ªöC 2: Ki·ªÉm tra EMAIL T·ªíN T·∫†I
                # Ch·ªâ ki·ªÉm tra n·∫øu KH√îNG c√≥ error patterns ·ªü tr√™n
                
                # Patterns ch·∫Øc ch·∫Øn email t·ªìn t·∫°i
                exist_patterns = [
                    "Nh·∫≠p m·∫≠t kh·∫©u",
                    "Enter your password", 
                    "Enter password",
                    "Nh·∫≠n m√£ ƒë·ªÉ ƒëƒÉng nh·∫≠p",
                    "Get a verification code",
                    "Ch√∫ng t√¥i s·∫Ω g·ª≠i y√™u c·∫ßu ƒëƒÉng nh·∫≠p"
                ]
                
                for pattern in exist_patterns:
                    if pattern.lower() in content.lower():
                        self.log(f"‚úÖ ƒê√É T·ªíN T·∫†I - T√¨m th·∫•y: '{pattern}'")
                        return True
                
                # B∆Ø·ªöC 3: Ki·ªÉm tra HTML elements ch·ªâ c√≥ khi email t·ªìn t·∫°i
                password_elements = [
                    'type="password"',
                    'name="passwd"',
                    'id="i0118"'
                ]
                
                password_field_count = 0
                for element in password_elements:
                    if element.lower() in content.lower():
                        password_field_count += 1
                        self.log(f"üîç T√¨m th·∫•y password field: {element}")
                
                if password_field_count > 0:
                    self.log(f"‚úÖ ƒê√É T·ªíN T·∫†I - C√≥ {password_field_count} password fields")
                    return True
                
                # B∆Ø·ªöC 4: N·∫øu kh√¥ng t√¨m th·∫•y g√¨ r√µ r√†ng
                self.log(f"‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c tr·∫°ng th√°i c·ªßa {email}")
                
                # Debug: In ra m·ªôt ƒëo·∫°n content ƒë·ªÉ ki·ªÉm tra
                content_snippet = content[:500] if len(content) > 500 else content
                self.log(f"üìÑ Content snippet: {content_snippet}")
                
                return None
                
            else:
                self.log(f"‚ùå HTTP {response.status_code} cho {email}")
                return None
                
        except requests.exceptions.ProxyError:
            self.log(f"‚ùå L·ªói proxy cho {email}")
            return None
        except requests.exceptions.Timeout:
            self.log(f"‚ùå Timeout cho {email}")
            return None
        except requests.exceptions.ConnectionError:
            self.log(f"‚ùå L·ªói k·∫øt n·ªëi cho {email}")
            return None
        except Exception as e:
            self.log(f"‚ùå L·ªói cho {email}: {str(e)}")
            return None
    
    def verify_with_post_request(self, session, email, proxies, timeout):
        """Ph∆∞∆°ng ph√°p b·ªï sung: Th·ª≠ POST request ƒë·ªÉ x√°c nh·∫≠n"""
        try:
            # Th·ª≠ g·ª≠i POST request gi·∫£ l·∫≠p form login
            post_url = "https://login.live.com/ppsecure/post.srf"
            
            post_headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.9',
                'Accept-Encoding': 'gzip, deflate, br',
                'Referer': f'https://login.live.com/?username={quote(email)}',
                'Origin': 'https://login.live.com',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1'
            }
            
            # Data gi·∫£ l·∫≠p (password sai ƒë·ªÉ ki·ªÉm tra response)
            post_data = {
                'login': email,
                'passwd': 'invalid_password_test_123',
                'LoginOptions': '3',
                'type': '11',
                'PPFT': '',  # Token s·∫Ω b·ªã thi·∫øu nh∆∞ng kh√¥ng sao
                'idsbho': '1',
                'sso': '',
                'default': 'false'
            }
            
            response = session.post(post_url, headers=post_headers, data=post_data, 
                                  proxies=proxies, timeout=timeout, allow_redirects=True)
            
            if response.status_code in [200, 302]:
                content_lower = response.text.lower()
                
                # N·∫øu c√≥ th√¥ng b√°o sai password = email t·ªìn t·∫°i
                if any(pattern in content_lower for pattern in [
                    'your account or password is incorrect',
                    'incorrect password',
                    'wrong password',
                    'password is incorrect',
                    'sign-in error'
                ]):
                    self.log(f"üîç POST method x√°c nh·∫≠n email t·ªìn t·∫°i")
                    return True
                    
                # N·∫øu c√≥ th√¥ng b√°o account kh√¥ng t·ªìn t·∫°i
                elif any(pattern in content_lower for pattern in [
                    'that microsoft account doesn\'t exist',
                    'account doesn\'t exist',
                    'we couldn\'t find an account'
                ]):
                    self.log(f"üîç POST method x√°c nh·∫≠n email kh√¥ng t·ªìn t·∫°i")
                    return False
            
            # N·∫øu kh√¥ng r√µ r√†ng, return None
            self.log(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ch√≠nh x√°c tr·∫°ng th√°i c·ªßa {email}")
            return None
            
        except Exception as e:
            self.log(f"‚ùå L·ªói POST verification cho {email}: {str(e)}")
            return None
    
    def read_emails_from_file(self, filename):
        """ƒê·ªçc email t·ª´ file"""
        if not os.path.exists(filename):
            messagebox.showerror("L·ªói", f"File {filename} kh√¥ng t·ªìn t·∫°i!")
            return []
        
        emails = []
        try:
            with open(filename, 'r', encoding='utf-8') as file:
                for line in file:
                    email = line.strip()
                    if email and '@' in email:
                        emails.append(email)
            return emails
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file {filename}: {str(e)}")
            return []
    
    def open_output_files(self):
        """M·ªü c√°c file output ƒë·ªÉ ghi real-time"""
        try:
            self.existing_file = open("da_tao.txt", "w", encoding="utf-8")
            self.non_existing_file = open("chua_tao.txt", "w", encoding="utf-8")  
            self.unknown_file = open("khong_xac_dinh.txt", "w", encoding="utf-8")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o file output: {str(e)}")
            return False
        return True
    
    def close_output_files(self):
        """ƒê√≥ng c√°c file output"""
        if self.existing_file:
            self.existing_file.close()
        if self.non_existing_file:
            self.non_existing_file.close()
        if self.unknown_file:
            self.unknown_file.close()
    
    def write_result_immediately(self, email, result):
        """Ghi k·∫øt qu·∫£ ngay l·∫≠p t·ª©c v√†o file"""
        try:
            if result is True and self.existing_file:
                self.existing_file.write(email + '\n')
                self.existing_file.flush()  # Force write to disk
                self.existing_count += 1
            elif result is False and self.non_existing_file:
                self.non_existing_file.write(email + '\n')
                self.non_existing_file.flush()
                self.non_existing_count += 1
            elif result is None and self.unknown_file:
                self.unknown_file.write(email + '\n')
                self.unknown_file.flush()
                self.unknown_count += 1
        except Exception as e:
            self.log(f"‚ùå L·ªói ghi file cho {email}: {str(e)}")
    
    def update_stats(self):
        """C·∫≠p nh·∫≠t th·ªëng k√™"""
        self.existing_label.config(text=f"‚úÖ ƒê√£ t·∫°o: {self.existing_count}")
        self.non_existing_label.config(text=f"‚ùå Ch∆∞a t·∫°o: {self.non_existing_count}")
        self.unknown_label.config(text=f"‚ö†Ô∏è Kh√¥ng r√µ: {self.unknown_count}")
    
    def checking_worker(self):
        """Worker thread ƒë·ªÉ ki·ªÉm tra email"""
        file_path = self.file_path_var.get()
        emails = self.read_emails_from_file(file_path)
        
        if not emails:
            self.log("‚ùå Kh√¥ng c√≥ email n√†o ƒë·ªÉ ki·ªÉm tra!")
            self.stop_checking()
            return
        
        self.total_emails = len(emails)
        self.progress_bar.config(maximum=self.total_emails)
        
        if not self.open_output_files():
            self.stop_checking()
            return
        
        # L·∫•y proxy n·∫øu c√≥
        proxy = None
        if self.use_proxy_var.get() and self.proxy_var.get().strip():
            proxy = self.proxy_var.get().strip()
            self.log(f"üåê S·ª≠ d·ª•ng proxy: {proxy}")
        else:
            self.log("üåê Kh√¥ng s·ª≠ d·ª•ng proxy")
        
        self.log(f"üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra {self.total_emails} email...")
        
        delay = int(self.delay_var.get())
        
        for i, email in enumerate(emails):
            if not self.is_checking:
                break
                
            self.current_index = i + 1
            self.progress_var.set(f"ƒêang ki·ªÉm tra ({self.current_index}/{self.total_emails}): {email}")
            self.progress_bar.config(value=self.current_index)
            
            self.log(f"üìß Ki·ªÉm tra: {email}")
            
            result = self.check_email_exists(email, proxy)
            
            if result is True:
                self.log(f"‚úÖ Email ƒë√£ t·ªìn t·∫°i: {email}")
            elif result is False:
                self.log(f"‚ùå Email ch∆∞a t·ªìn t·∫°i: {email}")
            else:
                self.log(f"‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c: {email}")
            
            # Ghi k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
            self.write_result_immediately(email, result)
            self.update_stats()
            
            if self.current_index < self.total_emails and self.is_checking:
                self.log(f"‚è≥ ƒê·ª£i {delay} gi√¢y...")
                for _ in range(delay * 10):  # Check every 0.1s for stop signal
                    if not self.is_checking:
                        break
                    time.sleep(0.1)
        
        self.close_output_files()
        
        if self.is_checking:  # Completed normally
            self.log(f"üéâ Ho√†n th√†nh! ƒê√£ ki·ªÉm tra {self.current_index}/{self.total_emails} email")
            self.progress_var.set("Ho√†n th√†nh!")
            messagebox.showinfo("Ho√†n th√†nh", 
                              f"ƒê√£ ki·ªÉm tra xong!\n"
                              f"‚úÖ ƒê√£ t·∫°o: {self.existing_count}\n"
                              f"‚ùå Ch∆∞a t·∫°o: {self.non_existing_count}\n"
                              f"‚ö†Ô∏è Kh√¥ng r√µ: {self.unknown_count}")
        else:
            self.log("‚èπÔ∏è ƒê√£ d·ª´ng ki·ªÉm tra")
            self.progress_var.set("ƒê√£ d·ª´ng")
        
        self.stop_checking()
    
    def start_checking(self):
        """B·∫Øt ƒë·∫ßu ki·ªÉm tra"""
        if self.is_checking:
            return
        
        # Reset counters
        self.existing_count = 0
        self.non_existing_count = 0
        self.unknown_count = 0
        self.current_index = 0
        
        # Clear log
        self.log_text.delete(1.0, tk.END)
        
        self.is_checking = True
        self.start_button.config(state='disabled')
        self.stop_button.config(state='normal')
        
        # Start worker thread
        thread = threading.Thread(target=self.checking_worker, daemon=True)
        thread.start()
    
    def stop_checking(self):
        """D·ª´ng ki·ªÉm tra"""
        self.is_checking = False
        self.start_button.config(state='normal')
        self.stop_button.config(state='disabled')

def main():
    root = tk.Tk()
    app = HotmailChecker(root)
    
    # Center window
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (root.winfo_width() // 2)
    y = (root.winfo_screenheight() // 2) - (root.winfo_height() // 2)
    root.geometry(f"+{x}+{y}")
    
    root.mainloop()

if __name__ == "__main__":
    main()
